<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:BaseUISupport.Controls"
                    xmlns:sys="clr-namespace:System;assembly=netstandard"
                    xmlns:helpers="clr-namespace:BaseUISupport.Helpers"
                    xmlns:converters="clr-namespace:BaseUISupport.Converters">


    <FontFamily x:Key="TimecodeFont">pack://application:,,,/FontUISupport;component/fonts/#Lekton</FontFamily>
    <FontFamily x:Key="DefaultFont">pack://application:,,,/FontUISupport;component/fonts/#Open Sans</FontFamily>
    
    <sys:Double x:Key="NormalRadiusValue">5</sys:Double>
    <sys:Double x:Key="CompactRadiusValue">3</sys:Double>
    <sys:Double x:Key="WindowRadiusValue">8</sys:Double>
    <sys:Double x:Key="WindowCropRadiusValue">14</sys:Double>

    <CornerRadius x:Key="NormalRadius" TopLeft="{StaticResource NormalRadiusValue}" TopRight="{StaticResource NormalRadiusValue}" BottomLeft="{StaticResource NormalRadiusValue}" BottomRight="{StaticResource NormalRadiusValue}"/>
    <CornerRadius x:Key="WindowRadius" TopLeft="{StaticResource WindowRadiusValue}" TopRight="{StaticResource WindowRadiusValue}" BottomLeft="{StaticResource WindowRadiusValue}" BottomRight="{StaticResource WindowRadiusValue}"/>
    <CornerRadius x:Key="WindowCropRadius" TopLeft="{StaticResource WindowCropRadiusValue}" TopRight="{StaticResource WindowCropRadiusValue}" BottomLeft="{StaticResource WindowCropRadiusValue}" BottomRight="{StaticResource WindowCropRadiusValue}"/>
    <CornerRadius x:Key="CloseRadius" TopLeft="0" TopRight="{StaticResource NormalRadiusValue}" BottomLeft="0" BottomRight="0"/>
    <CornerRadius x:Key="MinimizeRadius" TopLeft="0" TopRight="0" BottomLeft="{StaticResource NormalRadiusValue}" BottomRight="0"/>
    <CornerRadius x:Key="TopRadius" TopLeft="{StaticResource NormalRadiusValue}" TopRight="{StaticResource NormalRadiusValue}" BottomLeft="0" BottomRight="0"/>
    <CornerRadius x:Key="BottomRadius" TopLeft="0" TopRight="0" BottomLeft="{StaticResource NormalRadiusValue}" BottomRight="{StaticResource NormalRadiusValue}"/>
    <CornerRadius x:Key="MenuRadius" TopLeft="0" TopRight="{StaticResource NormalRadiusValue}" BottomLeft="{StaticResource NormalRadiusValue}" BottomRight="{StaticResource NormalRadiusValue}"/>

    <CornerRadius x:Key="CompactRadius" TopLeft="{StaticResource CompactRadiusValue}" TopRight="{StaticResource CompactRadiusValue}" BottomLeft="{StaticResource CompactRadiusValue}" BottomRight="{StaticResource CompactRadiusValue}"/>
    <CornerRadius x:Key="TopCompactRadius" TopLeft="{StaticResource CompactRadiusValue}" TopRight="{StaticResource CompactRadiusValue}" BottomLeft="0" BottomRight="0"/>
    <CornerRadius x:Key="BottomCompactRadius" TopLeft="0" TopRight="0" BottomLeft="{StaticResource CompactRadiusValue}" BottomRight="{StaticResource CompactRadiusValue}"/>
    <CornerRadius x:Key="MenuCompactRadius" TopLeft="0" TopRight="{StaticResource CompactRadiusValue}" BottomLeft="{StaticResource CompactRadiusValue}" BottomRight="{StaticResource CompactRadiusValue}"/>
    <CornerRadius x:Key="SubMenuCompactRadius" TopLeft="{StaticResource CompactRadiusValue}" TopRight="0" BottomLeft="{StaticResource CompactRadiusValue}" BottomRight="0"/>

    <Style x:Key="FocusedRectangle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource MainAccent}" BorderThickness="1" CornerRadius="{DynamicResource WindowRadius}" Margin="-2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TightFocusedRectangle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource MainAccent}" BorderThickness="1" CornerRadius="{DynamicResource NormalRadius}" Margin="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CompactFocusedRectangle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource MainAccent}" BorderThickness="1" CornerRadius="{DynamicResource CompactRadius}" Margin="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- CLOSE BUTTON -->
    <Style x:Key="WindowCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CloseRadius}" Padding="{TemplateBinding Padding}">
                        <Path x:Name="ButtonPath" Data="M0,0 L1,1 M0,1 L1,0" Stroke="{DynamicResource Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BaseBgRed}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                            <Setter TargetName="ButtonBorder" Property="CornerRadius" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ResizeMode, RelativeSource={RelativeSource AncestorType=Window}}" Value="NoResize">
                            <Setter TargetName="ButtonBorder" Property="CornerRadius" Value="{DynamicResource MinimizeRadius}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MAXIMIZE BUTTON -->
    <Style x:Key="WindowMaximizeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" CornerRadius="0" Padding="{TemplateBinding Padding}">
                        <Path x:Name="ButtonPath" Data="M0,0 L1,0 L1,1 L0,1z" Stroke="{DynamicResource Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RESTORE BUTTON -->
    <Style x:Key="WindowRestoreButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" CornerRadius="0" Padding="{TemplateBinding Padding}">
                        <Path x:Name="ButtonPath" Data="M0,2 L6,2 L6,8 L0,8z M2,0 L8,0 L8,6" Stroke="{DynamicResource Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MINIMIZE BUTTON -->
    <Style x:Key="WindowMinimizeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource MinimizeRadius}" Padding="{TemplateBinding Padding}">
                        <Path x:Name="ButtonPath" Data="M0,0 M0,2 M0,1 L2,1" Stroke="{DynamicResource Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- APP WINDOW -->
    <Style TargetType="{x:Type ui:AppWindow}" x:Key="AppWindowStyle">
        <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
        <Setter Property="WindowBackground" Value="{DynamicResource Background}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainAccent}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontWeight" Value="{DynamicResource FontWeightRegular}"/>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResize"/>
        <Setter Property="MinWidth" Value="180"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="CaptionHeight" Value="26"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome x:Name="AppWindowChrome" GlassFrameThickness="0" ResizeBorderThickness="6" NonClientFrameEdges="None" CaptionHeight="26" UseAeroCaptionButtons="False" CornerRadius="{DynamicResource WindowCropRadius}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:AppWindow}">
                    <Border x:Name="WindowCaptionBorder" SnapsToDevicePixels="True">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!-- WINDOW BACKGROUND -->
                            <Border x:Name="WindowBackground" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="{DynamicResource WindowRadius}" SnapsToDevicePixels="False" />

                            <Border x:Name="StatusBarBorder" Background="{Binding Path=StatusColor, RelativeSource={RelativeSource AncestorType=ui:AppWindow}}" Grid.Row="2" CornerRadius="{DynamicResource BottomCompactRadius}" Margin="3 -3 3 3"></Border>

                            <!-- CONTENT BORDER -->
                            <Border Grid.Row="1" x:Name="WindowContentBorder" Background="{TemplateBinding WindowBackground}" CornerRadius="{DynamicResource CompactRadius}" Margin="3 0 3 0" >
                                <AdornerDecorator SnapsToDevicePixels="True">
                                    <ContentPresenter x:Name="WindowContent" SnapsToDevicePixels="True" TextElement.Foreground="{DynamicResource Foreground}" />
                                </AdornerDecorator>
                            </Border>

                            <!-- STATUS BAR -->
                            <ContentPresenter Grid.Row="2" x:Name="StatusBar" VerticalAlignment="Center" Content="{Binding Path=StatusBar, RelativeSource={RelativeSource AncestorType=ui:AppWindow}}" Margin="5 0 5 0"/>
                            
                            <!-- WINDOW BORDER -->
                            <ResizeGrip Grid.Row="2" x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed" IsTabStop="false" />
                            <Border x:Name="WindowBorder" Grid.RowSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{DynamicResource WindowRadius}" SnapsToDevicePixels="True"/>

                            <!-- WINDOW CAPTION -->
                            <DockPanel SnapsToDevicePixels="True">
                                <!-- RIGHT AREA -->
                                <StackPanel DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top">
                                    <Button Name="MinimizeApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowMinimizeButtonStyle}" Command="{x:Static ui:AppWindow.AppWindowMinimizeCommand}"/>
                                    <Button Name="RestoreApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowRestoreButtonStyle}" Command="{x:Static ui:AppWindow.AppWindowMaximizeCommand}" Visibility="Collapsed"/>
                                    <Button Name="MaximizeApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowMaximizeButtonStyle}" Command="{x:Static ui:AppWindow.AppWindowMaximizeCommand}"/>
                                    <Button Name="CloseApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowCloseButtonStyle}" Command="{x:Static ui:AppWindow.AppWindowCloseCommand}"/>
                                </StackPanel>

                                <!-- LEFT AREA-->
                                <StackPanel DockPanel.Dock="Left" Orientation="Horizontal" HorizontalAlignment="Left" Margin="5 2 5 0" SnapsToDevicePixels="True">
                                    <ContentPresenter Content="{Binding Path=WindowIcon, RelativeSource={RelativeSource AncestorType=ui:AppWindow}}"/>
                                    <TextBlock x:Name="Title" Text="{TemplateBinding Title}" VerticalAlignment="Center" Margin="6 0"/>
                                    <Border x:Name="TitleSeparator" VerticalAlignment="Stretch" Width="1" BorderBrush="{DynamicResource DetailAccent}" BorderThickness="1" Margin="6" SnapsToDevicePixels="True" />
                                    <ContentPresenter x:Name="MenuBar" VerticalAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}" WindowChrome.IsHitTestVisibleInChrome="True" Content="{Binding Path=MenuBar, RelativeSource={RelativeSource AncestorType=ui:AppWindow}}"/>
                                </StackPanel>

                                <!-- STATUS BLOCK -->
                                <ContentPresenter x:Name="TopStatusBlock" Margin="10 1 10 0" DockPanel.Dock="Right" HorizontalAlignment="Right" Content="{Binding Path=TopStatusBlock, RelativeSource={RelativeSource AncestorType=ui:AppWindow}}" WindowChrome.IsHitTestVisibleInChrome="False"/>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ui:AppWindow.MenuBar">
                            <Trigger.Value>
                                <x:Null/>
                            </Trigger.Value>
                            <Setter TargetName="TitleSeparator" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.TopStatusBlock">
                            <Trigger.Value>
                                <x:Null/>
                            </Trigger.Value>
                            <Setter TargetName="TopStatusBlock" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.HideTitle" Value="True">
                            <Setter TargetName="Title" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TitleSeparator" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.StatusBar" Value="{x:Null}">
                            <Setter TargetName="StatusBarBorder" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StatusBar" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="WindowContentBorder" Property="Margin" Value="3 0 3 3"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="WindowResizeBorderThickness" Value="0" />
                            <Setter TargetName="WindowCaptionBorder" Property="BorderThickness" Value="0" />
                            <Setter TargetName="WindowCaptionBorder" Property="Padding" Value="7" />
                            <Setter TargetName="WindowBorder" Property="BorderThickness" Value="0" />
                            <Setter TargetName="WindowContent" Property="Margin" Value="0" />
                            <Setter TargetName="WindowContentBorder" Property="Margin" Value="0" />
                            <Setter TargetName="StatusBarBorder" Property="Margin" Value="0" />
                            <Setter TargetName="WindowBackground" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="WindowContentBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="StatusBarBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="MaximizeApp" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RestoreApp" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="WindowResizeBorderThickness" Value="6" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="WindowState" Value="Maximized"/>
                                <Condition Property="ui:AppWindow.StatusBar" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowContentBorder" Property="Margin" Value="0"/>
                        </MultiTrigger>
                        <Trigger Property="ui:AppWindow.StatusBar">
                            <Trigger.Value>
                                <sys:Object/>
                            </Trigger.Value>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="MinimizeApp" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MaximizeApp" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MinimizeApp" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MaximizeApp" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ui:AppWindow.WindowsThemeStyle" Value="Aero">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="28"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="27"/>
                            <Setter TargetName="RestoreApp" Property="Width" Value="27"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="51"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="RestoreApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="RestoreApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.WindowsThemeStyle" Value="Aero2">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="26"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="26"/>
                            <Setter TargetName="RestoreApp" Property="Width" Value="26"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="50"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="RestoreApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="RestoreApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.WindowsThemeStyle" Value="Basic">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="33"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="33"/>
                            <Setter TargetName="RestoreApp" Property="Width" Value="33"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="34"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="RestoreApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="RestoreApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.WindowsThemeStyle" Value="Classic">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="17"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="17"/>
                            <Setter TargetName="RestoreApp" Property="Width" Value="17"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="18"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="RestoreApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="RestoreApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlBgOver}"/>
                            <Setter TargetName="MinimizeApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="RestoreApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="MaximizeApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="CloseApp" Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ui:AppWindow}" BasedOn="{StaticResource AppWindowStyle}"/>

    <!-- DIALOG WINDOW -->
    <Style TargetType="{x:Type ui:DialogWindow}" x:Key="DialogWindowStyle">
        <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainAccent}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontWeight" Value="{DynamicResource FontWeightRegular}"/>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResize"/>
        <Setter Property="MinWidth" Value="170"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome x:Name="AppWindowChrome" GlassFrameThickness="0" ResizeBorderThickness="6" NonClientFrameEdges="None" CaptionHeight="26" UseAeroCaptionButtons="False" CornerRadius="{DynamicResource WindowCropRadius}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:DialogWindow}">
                    <Border SnapsToDevicePixels="True">
                        <Grid x:Name="WindowCaptionBorder" SnapsToDevicePixels="True" MinWidth="170" MinHeight="50">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!-- WINDOW BACKGROUND -->
                            <Border x:Name="WindowBackground" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="{DynamicResource WindowRadius}" SnapsToDevicePixels="True" />
                            
                            <AdornerDecorator Grid.Row="1" SnapsToDevicePixels="True">
                                <!-- CONTENT BORDER -->
                                <ContentPresenter x:Name="WindowContent" SnapsToDevicePixels="True"/>
                            </AdornerDecorator>

                            <!-- WINDOW BORDER -->
                            <ResizeGrip Grid.Row="2" x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed" IsTabStop="false" />
                            <Border x:Name="WindowBorder" Grid.RowSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{DynamicResource WindowRadius}" SnapsToDevicePixels="True"/>

                            <!-- WINDOW CAPTION -->
                            <DockPanel SnapsToDevicePixels="True">
                                <!-- RIGHT AREA -->
                                <StackPanel DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" SnapsToDevicePixels="True">
                                    <Button Name="MinimizeApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowMinimizeButtonStyle}" Command="{x:Static ui:DialogWindow.DialogWindowMinimizeCommand}"/>
                                    <Button Name="RestoreApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowRestoreButtonStyle}" Command="{x:Static ui:DialogWindow.DialogWindowMaximizeCommand}" Visibility="Collapsed"/>
                                    <Button Name="MaximizeApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowMaximizeButtonStyle}" Command="{x:Static ui:DialogWindow.DialogWindowMaximizeCommand}"/>
                                    <Button Name="CloseApp" Height="30" Width="46" Padding="5" HorizontalAlignment="Left" Style="{DynamicResource WindowCloseButtonStyle}" Command="{x:Static ui:DialogWindow.DialogWindowCloseCommand}"/>
                                </StackPanel>

                                <!-- LEFT AREA-->
                                <TextBlock DockPanel.Dock="Left" HorizontalAlignment="Left" SnapsToDevicePixels="True" x:Name="Title" Text="{TemplateBinding Title}" VerticalAlignment="Center" Margin="6 0" TextTrimming="CharacterEllipsis"/>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaximizeApp" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="MaximizeApp" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MinimizeApp" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ui:AppWindow.StatusBar">
                            <Trigger.Value>
                                <sys:Object/>
                            </Trigger.Value>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowCaptionBorder" Property="Margin" Value="7" />
                            <Setter TargetName="WindowBorder" Property="BorderThickness" Value="0" />
                            <Setter TargetName="WindowContent" Property="Margin" Value="0" />
                            <Setter TargetName="MaximizeApp" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RestoreApp" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ui:DialogWindow.WindowsThemeStyle" Value="Aero">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="28"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="27"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="51"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:DialogWindow.WindowsThemeStyle" Value="Aero2">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="26"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="26"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="50"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:DialogWindow.WindowsThemeStyle" Value="Basic">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="33"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="33"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="34"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="ui:DialogWindow.WindowsThemeStyle" Value="Classic">
                            <Setter TargetName="MinimizeApp" Property="Width" Value="17"/>
                            <Setter TargetName="MaximizeApp" Property="Width" Value="17"/>
                            <Setter TargetName="CloseApp" Property="Width" Value="18"/>
                            <Setter TargetName="MinimizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="MaximizeApp" Property="Height" Value="20"/>
                            <Setter TargetName="CloseApp" Property="Height" Value="20"/>
                            <Setter TargetName="MinimizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="MaximizeApp" Property="Padding" Value="3"/>
                            <Setter TargetName="CloseApp" Property="Padding" Value="3"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlBgOver}"/>
                            <Setter TargetName="MinimizeApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="RestoreApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="MaximizeApp" Property="Opacity" Value=".5"/>
                            <Setter TargetName="CloseApp" Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ui:DialogWindow}" BasedOn="{StaticResource DialogWindowStyle}"/>


    <!-- APP ICON BASE -->
    <Style x:Key="AppIcon" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Width" Value="439"/>
        <Setter Property="Height" Value="439"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- LINE ICON -->
    <Style x:Key="LineIcon" TargetType="{x:Type Path}">
        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Width" Value="512"/>
        <Setter Property="Height" Value="512"/>
        <Setter Property="StrokeThickness" Value="32"/>
        <Setter Property="StrokeEndLineCap" Value="Flat"/>
        <Setter Property="StrokeStartLineCap" Value="Flat"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- TEXT BLOCK -->
    <Style x:Key="TextBlock" TargetType="{x:Type TextBlock}">
        <!--<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>-->
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlock}"/>
    
    <Style x:Key="Hyperlink" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource MainAccent}"/>
        <Setter Property="TextDecorations" Value="None"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HighlightAccent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource Hyperlink}"/>


    <!-- TEXT BOX -->
    <Style x:Key="TextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2 1"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource ControlBgDown}"/>
        <Setter Property="SelectionTextBrush" Value="{DynamicResource Foreground}"/>
        <Setter Property="SelectionOpacity" Value="1"/>
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TightFocusedRectangle}"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="TextBlock.LineHeight" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource CompactRadius}">
                            <ScrollViewer Margin="{TemplateBinding Padding}" Padding="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="PART_ContentHost" CanContentScroll="False" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="AcceptsReturn" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="AcceptsReturn" Value="True">
                            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBox}"/>

    <Style x:Key="DataGridTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource Foreground}"/>
        <Setter Property="SelectionTextBrush" Value="{DynamicResource ControlBgDown}"/>
        <Setter Property="SelectionOpacity" Value="1"/>
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TightFocusedRectangle}"/>
        <Setter Property="helpers:FocusHelper.SelectAllOnFocus" Value="True"/>
    </Style>
    


    <!-- TOOL TIP -->
    <Style x:Key="ToolTip" TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBgDown}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 4 4 2"/>
        <Setter Property="ToolTipService.HorizontalOffset" Value="5"/>
        <Setter Property="ToolTipService.VerticalOffset" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border x:Name="Border" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MaxWidth}" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource CompactRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" TextBlock.LineHeight="{TemplateBinding FontSize}" TextBlock.LineStackingStrategy="BlockLineHeight"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource ToolTip}"/>

    
    <!-- GROUP BOX -->
    <Style x:Key="GroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding BorderBrush}" HorizontalAlignment="Left" CornerRadius="{DynamicResource TopCompactRadius}" Padding="2 3 2 6" Margin="0 0 0 -6">
                            <ContentPresenter ContentSource="Header" Margin="3 2" TextBlock.LineHeight="{TemplateBinding FontSize}"/>
                        </Border>
                        <Border SnapsToDevicePixels="True" Background="{TemplateBinding Background}" Grid.Row="1" CornerRadius="{StaticResource CompactRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource GroupBox}"/>

    
    <!-- BUTTON -->
    <Style x:Key="Button" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid SnapsToDevicePixels="True">
                        <Border SnapsToDevicePixels="True" BorderThickness="0" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}">
                            <Grid>
                                <Border x:Name="ColorEffect" BorderThickness="0" Background="Transparent" CornerRadius="{DynamicResource CompactRadius}"/>
                                <ContentPresenter x:Name="PART_Content" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextBlock.LineHeight="{TemplateBinding FontSize}" />
                                <Border x:Name="Border" BorderBrush="{TemplateBinding Background}" BorderThickness="1" CornerRadius="{DynamicResource CompactRadius}" Visibility="Hidden"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Background" Value="Transparent">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MainAccent}"/>
                        </Trigger>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter TargetName="Border" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsCancel" Value="True">
                            <Setter TargetName="Border" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BaseBgRed}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgIdle}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgPressed}" />
                        </MultiTrigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgIdle}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCancel" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource BaseBgRed}"/>
                        </MultiTrigger>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button}"/>

    
    <!-- TOGGLE BUTTON -->
    <Style x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border SnapsToDevicePixels="True" BorderThickness="0" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}">
                            <Grid>
                                <Border x:Name="ColorEffect" BorderThickness="0" Background="Transparent" CornerRadius="{DynamicResource CompactRadius}"/>
                                <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" TextBlock.LineHeight="{TemplateBinding FontSize}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgUntoggled}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgUntoggledOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgUntoggledPressed}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgUntoggledOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource EffectBgUntoggledPressed}" />
                        </MultiTrigger>
                        <!--<Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ColorEffect" Property="BorderBrush" Value="#22FFFFFF" />
                            <Setter TargetName="ColorEffect" Property="BorderThickness" Value="1" />
                        </Trigger>-->
                        <Trigger Property="Background" Value="Transparent">
                            <Setter TargetName="ColorEffect" Property="BorderThickness" Value="0" />
                        </Trigger>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgIdle}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgToggled}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgToggled}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgToggled}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButton}"/>
    <Style TargetType="{x:Type ui:LockableToggleButton}" BasedOn="{StaticResource ToggleButton}"/>




    <Style x:Key="IconButton" TargetType="{x:Type ui:IconButton}">
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Size" Value="16"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Gap" Value="5"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:IconButton}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Rectangle Fill="{TemplateBinding Background}" />
                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="{TemplateBinding Orientation}" Margin="{TemplateBinding Padding}">
                            <Viewbox Width="{TemplateBinding Size}" Height="{TemplateBinding Size}">
                                <Path x:Name="IconPath" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Style="{TemplateBinding Icon}"/>
                            </Viewbox>
                            <Border x:Name="HorizontalGap" Width="{TemplateBinding Gap}" Height="0"></Border>
                            <Border x:Name="VerticalGap" Width="0" Height="{TemplateBinding Gap}"></Border>
                            <ContentControl x:Name="Content" Content="{TemplateBinding Content}" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Gap" Value="0"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="HorizontalGap" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="VerticalGap" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="HorizontalGap" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="VerticalGap" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                            <Setter TargetName="IconPath" Property="Fill" Value="{DynamicResource Foreground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlBgDown}" />
                            <Setter TargetName="IconPath" Property="Fill" Value="{DynamicResource ControlBgDown}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="IconPath" Property="Opacity" Value=".9" />
                            <Setter TargetName="Content" Property="Opacity" Value=".9" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ui:IconButton}" BasedOn="{StaticResource IconButton}"/>

    <!-- GRID SPLITTER -->
    <Style TargetType="{x:Type GridSplitter}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ControlBgOver}"/>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Margin" Value="0 10"/>
                <Setter Property="Width" Value="4"/>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Margin" Value="10 0"/>
                <Setter Property="Height" Value="4"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
    </Style>

    <!-- SEPARATOR -->

    <Style x:Key="Separator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="2" />
        <Setter Property="Margin" Value="4 0 4 2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid SnapsToDevicePixels="True">
                        <Border HorizontalAlignment="Stretch" Height="1" BorderThickness="1" BorderBrush="{DynamicResource DetailAccent}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MENU ITEM -->
    <Style x:Key="MenuItem" TargetType="{x:Type MenuItem}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource Separator}" />
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="True" CornerRadius="{DynamicResource CompactRadius}">
                            <Grid SnapsToDevicePixels="True">
                                <Grid x:Name="Grid" SnapsToDevicePixels="True" Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="IconColumn" Width="Auto" SharedSizeGroup="MenuIcon"/>
                                        <ColumnDefinition x:Name="HeaderColumn" Width="Auto" SharedSizeGroup="MenuHeader"/>
                                        <ColumnDefinition x:Name="GestureColumn" Width="Auto" SharedSizeGroup="MenuGesture"/>
                                        <ColumnDefinition x:Name="ArrowColumn" Width="Auto" SharedSizeGroup="MenuArrow"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="Icon" Margin="4 0 4 0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Border Width="16" Margin="0 0 0 0">
                                            <Viewbox>
                                                <ContentPresenter ContentSource="Icon"/>
                                            </Viewbox>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Column="0" x:Name="Check" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed">
                                        <Border Width="16" Margin="4 0 4 0" x:Name="CheckBox" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ControlBgIdle}" Padding="0" CornerRadius="{DynamicResource CompactRadius}">
                                            <Grid x:Name="markGrid">
                                                <Viewbox>
                                                    <Grid Margin="2">
                                                        <Path Width="10" Height="10" x:Name="optionMark" Data="M1.5,1.5 L3,3 L6,0" Stroke="{DynamicResource Foreground}" StrokeThickness="1" Margin="1" Stretch="Uniform" Visibility="Hidden"/>
                                                    </Grid>
                                                </Viewbox>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                                    <ContentPresenter Grid.Column="2" Margin="30 0 5 0" x:Name="Gesture" ContentSource="InputGestureText" VerticalAlignment="Center" >
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlock}">
                                                <Setter Property="Opacity" Value=".5"/>
                                            </Style>
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Stroke="{DynamicResource Foreground}" StrokeThickness="1" Data="M0,0 L4,4 L0,8"/>
                                    </Grid>
                                </Grid>
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" BitmapEffect="{x:Null}" VerticalOffset="0" HorizontalOffset="0" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="None" AllowsTransparency="True">
                                    <Grid Margin="0,0,5,5">
                                        <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource MainAccent}" BorderThickness="1" Background="{DynamicResource PanelBackground}" SnapsToDevicePixels="True" CornerRadius="{DynamicResource MenuRadius}">
                                            <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True" Margin="2">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0 0 0 -2"/>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="4 3 4 2"/> <!--6 4 6 3-->
                            <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
                            <Setter Property="TextBlock.LineHeight" Value="{Binding Path=FontSize, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextBlock.BaselineOffset" Value="5"/>
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom"/>
                            <Setter TargetName="IconColumn" Property="MinWidth" Value="0"/>
                            <Setter TargetName="GestureColumn" Property="Width" Value="0"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Gesture" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SubMenuBorder" Property="BorderThickness" Value="1"/>
                            <Setter TargetName="SubMenu" Property="Margin" Value="2,3,2,2"/>
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource CompactFocusedRectangle}"/>
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="2 0"/>
                            <Setter TargetName="IconColumn" Property="MinWidth" Value="0"/>
                            <Setter TargetName="GestureColumn" Property="Width" Value="Auto"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Gesture" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource CompactFocusedRectangle}"/>
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="5 3 0 3"/>
                            <Setter Property="Margin" Value="0 0 0 2"/>
                            <!--<Setter TargetName="Border" Property="Height" Value="22"/>-->
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="5 3 0 3"/>
                            <Setter Property="Margin" Value="0 0 0 2"/>
                            <!--<Setter TargetName="Border" Property="Height" Value="22"/>-->
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="Role" Value="TopLevelHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="Role" Value="TopLevelItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="Role" Value="SubmenuHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="Role" Value="SubmenuItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsCheckable" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckBox" Property="Background" Value="{DynamicResource PanelBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MainAccent}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSubmenuOpen" Value="True"/>
                                <Condition Property="Role" Value="TopLevelHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MainAccent}"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource TopCompactRadius}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSubmenuOpen" Value="True"/>
                                <Condition Property="Role" Value="SubMenuHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ArrowPanelPath" Property="Stroke" Value="Transparent"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource SubMenuCompactRadius}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MainAccent}"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="True">
                            <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItem}"/>


    <!-- MENU -->
    <Style TargetType="{x:Type Menu}" x:Key="Menu">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource FontWeightLight}"/>
        <Setter Property="FontStretch" Value="ExtraExpanded"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource Menu}"/>

    
    <!-- CONTEXT MENU -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="{DynamicResource PanelBackground}" BorderThickness="0" CornerRadius="{DynamicResource CompactRadius}" SnapsToDevicePixels="True" UseLayoutRounding="False">
                        <Border x:Name="Border" BorderThickness="1" BorderBrush="{DynamicResource MainAccent}" ClipToBounds="False" CornerRadius="{DynamicResource CompactRadius}" SnapsToDevicePixels="True">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="True" Margin="2 2 2 0" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FontWeight" Value="{DynamicResource FontWeightLight}"/>
        <Setter Property="FontStretch" Value="ExtraExpanded"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>


    <!-- SCROLL BAR -->
    <Style x:Key="ScrollBar" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Style x:Key="ScrollBarRepeat" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Background" Value="Transparent"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                        <Setter Property="Opacity" Value=".5"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="{DynamicResource CompactRadius}" />
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ControlBgDown}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
                <ControlTemplate.Resources>
                    <Style x:Key="ScrollBarRepeatTop" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ScrollBarRepeat}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border Background="{TemplateBinding Background}" CornerRadius="3 3 0 0" Margin="0 0 0 -6" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ScrollBarRepeatBottom" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ScrollBarRepeat}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border Background="{TemplateBinding Background}" CornerRadius="0 0 3 3" Margin="0 -6 0 0" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ControlTemplate.Resources>
                <Grid Margin="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Border Margin="{TemplateBinding Padding}"/>
                    <Track Width="6" Name="PART_Track" Grid.Column="1" IsDirectionReversed="true">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource ScrollBarRepeatTop}" Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource ScrollBarRepeatBottom}" Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}"/>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
                <ControlTemplate.Resources>
                    <Style x:Key="ScrollBarRepeatLeft" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ScrollBarRepeat}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border Background="{TemplateBinding Background}" CornerRadius="3 0 0 3" Margin="0 0 -6 0" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ScrollBarRepeatRight" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ScrollBarRepeat}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border Background="{TemplateBinding Background}" CornerRadius="0 3 3 0" Margin="-6 0 0 0" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ControlTemplate.Resources>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Border Margin="{TemplateBinding Padding}"/>
                    <Track Height="6" Name="PART_Track" Grid.Column="1" Grid.Row="1" IsDirectionReversed="false">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource ScrollBarRepeatLeft}" Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource ScrollBarRepeatRight}" Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}"/>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBar}"/>

    
    <!-- SCROLL VIEWER -->
    <Style x:Key="ScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Grid.Row="1" Fill="Transparent"/>
                        <Border x:Name="PART_ScrollContentPresenterContainer" Background="Transparent">
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="helpers:ScrollViewerHelper.ShiftWheelScrollsHorizontally" Value="True"/>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewer}" />


    <!-- CHECKBOX -->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Border x:Name="checkBoxBorder" BorderThickness="0" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{DynamicResource CompactRadius}">
                                    <Grid x:Name="markGrid">
                                        <Viewbox MaxHeight="20">
                                            <Grid>
                                                <Path Width="10" Height="10" Margin="0" x:Name="optionMark" Data="M1.5,1.5 L3,3 L6,0" StrokeThickness="1" Stroke="{TemplateBinding Foreground}" Opacity="0" Stretch="Uniform"/>
                                                <Rectangle Width="10" Height="10" Margin="0" x:Name="indeterminateMark" Fill="{TemplateBinding Foreground}" Opacity="0" />
                                            </Grid>
                                        </Viewbox>
                                    </Grid>
                                </Border>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5 0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ControlBgDown}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="Background" Value="Transparent">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Background" Value="Transparent"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="optionMark" Value=".5"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Height" Value="20"/>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}" />

    <Style x:Key="DataGridCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="IsChecked" Value="True"/>
        <Setter Property="Opacity" Value=".75"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Height" Value="20"/>
    </Style>
    <Style x:Key="EditingDataGridCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Height" Value="20"/>
    </Style>


    <!-- LISTBOX -->
    <Style x:Key="ListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Margin" Value="0 0 0 2"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}">
                        <Grid>
                            <Border x:Name="ColorEffect" CornerRadius="{DynamicResource CompactRadius}" BorderThickness="0"/>
                            <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#BB2C2C2C" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#66333333" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#22000000" />
                            <Setter TargetName="ColorEffect" Property="BorderBrush" Value="#22FFFFFF" />
                            <Setter TargetName="ColorEffect" Property="BorderThickness" Value="1" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgIdle}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                            <Setter TargetName="ColorEffect" Property="BorderThickness" Value="0" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="helpers:ListBoxHelper.ScrollOnNewItem" Value="True"/>
        <Setter Property="helpers:ListBoxHelper.EnableDragAndDrop" Value="True"/>
        <Setter Property="helpers:ListBoxHelper.EnableSelectionRectangle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItem}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Margin="0 0 0 -2" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border ClipToBounds="True" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource NormalRadius}">
                        <ScrollViewer Margin="{TemplateBinding Padding}" Padding="0">
                            <ScrollViewer.Resources>
                                <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBar}">
                                    <Setter Property="Padding" Value="1"/>
                                </Style>
                            </ScrollViewer.Resources>
                            <AdornerDecorator ClipToBounds="True">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </AdornerDecorator>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WrapListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="helpers:ListBoxHelper.ScrollOnNewItem" Value="True"/>
        <Setter Property="helpers:ListBoxHelper.EnableDragAndDrop" Value="True"/>
        <Setter Property="helpers:ListBoxHelper.EnableSelectionRectangle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource NormalRadius}">
                        <ScrollViewer Margin="{TemplateBinding Padding}" PanningRatio="1" PanningDeceleration="1"  Padding="0" HorizontalScrollBarVisibility="Disabled">
                            <ScrollViewer.Resources>
                                <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBar}">
                                    <Setter Property="Padding" Value="1"/>
                                </Style>
                            </ScrollViewer.Resources>
                            <AdornerDecorator>
                                <WrapPanel Orientation="Horizontal" IsItemsHost="True" Margin="0 0" />
                            </AdornerDecorator>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBox}"/>


    
    <!-- COMBO BOX -->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="ControlBorder" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource NormalRadius}"/>
                        <Path x:Name="ArrowIcon" Width="10" Height="10" Grid.Column="2" Margin="5" Data="M0,0 L3,3 L6,0" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Stretch="Uniform"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ControlBorder" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ControlBorder" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ArrowIcon" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ControlBorder" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                            <Setter TargetName="ControlBorder" Property="CornerRadius" Value="{DynamicResource TopRadius}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ControlBorder" Property="Background" Value="Transparent"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Background="Transparent" Height="{TemplateBinding Height}">
                        <Border Margin="0 1 0 1" x:Name="ColorEffect" CornerRadius="{DynamicResource CompactRadius}" BorderThickness="0">
                            <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Margin="0" Padding="0" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="ComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TightFocusedRectangle}"/>
        <Setter Property="helpers:ComboBoxHelper.FixComboBoxDirection" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Focusable="False" ClickMode="Press" Style="{DynamicResource ComboBoxToggleButton}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                        <Grid Margin="4 0 20 0">
                            <ContentPresenter x:Name="PART_Content" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Foreground="{TemplateBinding Foreground}" CaretBrush="{TemplateBinding Foreground}" SelectionBrush="{DynamicResource ControlBgDown}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Padding="0" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                        </Grid>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="None" Margin="0 0 -20 0" SnapsToDevicePixels="True">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource PanelBackground}" BorderThickness="0" CornerRadius="{DynamicResource BottomRadius}" SnapsToDevicePixels="True">
                                    <Border BorderBrush="{DynamicResource ControlBgDown}" BorderThickness="1" CornerRadius="{DynamicResource BottomRadius}" SnapsToDevicePixels="True">
                                    </Border>
                                </Border>
                                <ScrollViewer Margin="2" SnapsToDevicePixels="True">
                                    <ScrollViewer.Resources>
                                        <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBar}">
                                            <Setter Property="Padding" Value="1"/>
                                        </Style>
                                    </ScrollViewer.Resources>
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Margin="1 0 1 0" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ElementName=Popup, Path=Placement}" Value="Top">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="{DynamicResource BottomRadius}"/>
                        </DataTrigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_Content" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}"/>

    <Style x:Key="DataGridComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Opacity" Value="0.5"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TightFocusedRectangle}"/>
    </Style>
    <Style x:Key="EditingDataGridComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TightFocusedRectangle}"/>
    </Style>
    

    <converters:EnumConverter x:Key="enumConverter"/>
    <Style x:Key="EnumComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource enumConverter}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    
    
    <!-- DATAGRID -->
    <Style x:Key="DataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="Background" Value="Transparent"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border x:Name="CellBackground" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{DynamicResource CompactRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid ClipToBounds="False">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="BackgroundBorder" Grid.ColumnSpan="2" Background="{DynamicResource ControlBgDown}" CornerRadius="{StaticResource TopCompactRadius}"/>
                            <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}" FontSize="12" FontWeight="{DynamicResource FontWeightSemibold}" TextAlignment="Left">
                                <ContentPresenter Margin="3" VerticalAlignment="Center"/>
                            </TextBlock>
                            <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L3,3 L6,0" Stretch="Uniform" Grid.Column="1" Width="10" Height="10" Stroke="{DynamicResource Foreground}" StrokeThickness="1" Margin="4 0 6 0" VerticalAlignment="Center" RenderTransformOrigin=".5,.5" />
                        </Grid>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{DynamicResource ColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="{x:Null}">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="SortDirection" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </MultiTrigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="DisplayIndex" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_LeftHeaderGripper"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="helpers:DataGridHelper.FixCorners" Value="True"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="{DynamicResource DialogBackground}"/>
        <Setter Property="RowBackground" Value="{DynamicResource DataGridRowBgOdd}"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource DataGridRowBgEven}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border x:Name="border" SnapsToDevicePixels="True" Background="{DynamicResource PanelBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{StaticResource CompactRadius}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                </VisualState>
                                <VisualState x:Name="Normal" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false" Background="White" Margin="2">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Button Focusable="false" Command="{x:Static DataGrid.SelectAllCommand}" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="2" Grid.Row="1" CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Grid.Row="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DataGrid}"/>
    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource DataGridColumnHeader}"/>
    <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DataGridCell}"/>

    
    
    <!-- TAB ITEM -->
    <Style x:Key="TabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="FontStretch" Value="Normal"/>
        <Setter Property="Padding" Value="4 1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="ItemBorder" Padding="0 0 0 5" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource TopCompactRadius}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Margin="{TemplateBinding Padding}" x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True"/>
                            <TextBox Margin="0" Background="Transparent" SelectionBrush="{DynamicResource Foreground}" SelectionTextBrush="{DynamicResource MainAccent}" BorderThickness="0" Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType=TabItem}}" Visibility="Collapsed"></TextBox>
                            <Button x:Name="PART_CloseTabButton" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Visible" Focusable="False">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
                                        <Setter Property="Margin" Value="1"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Padding="0" Margin="0" x:Name="ButtonBorder" Background="Transparent" CornerRadius="{DynamicResource CompactRadius}">
                                                        <ContentPresenter Content="{TemplateBinding Content}" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ForegroundDisabled}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource BaseBgRed}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                                <Path Width="8" Height="8" x:Name="ButtonPath" Data="M0,0 L1,1 M0,1 L1,0" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value=".25"/>
                            <Setter TargetName="PART_CloseTabButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}"/>
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource TabItem}"/>
    
    <Style x:Key="TabControl" TargetType="{x:Type TabControl}">
        <Setter Property="TabStripPlacement" Value="Top" />
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="{DynamicResource DialogBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MainAccent}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="AlternationCount" Value="{Binding Path=Items.Count, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="False" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" MinWidth="10"/>
                            </Grid.ColumnDefinitions>
                            <ScrollViewer Margin="5 0 5 0" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Disabled" CanContentScroll="False" Grid.Column="0" Grid.Row="0" SnapsToDevicePixels="True">
                                <StackPanel Orientation="Horizontal" IsItemsHost="True" Name="HeaderPanel" Panel.ZIndex="0" KeyboardNavigation.TabIndex="1"/>
                            </ScrollViewer>
                        </Grid>
                        <Grid Name="ContentPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Column="0" Grid.Row="1">
                            <Border x:Name="ContentBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource NormalRadius}">
                                <ContentPresenter Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource TabControl}"/>



    <Style x:Key="TabbedPanelItem" TargetType="{x:Type ui:TabbedPanelItem}" BasedOn="{StaticResource TabItem}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="FontStretch" Value="Normal"/>
        <Setter Property="Padding" Value="5 1 3 1"/>
        <Setter Property="Margin" Value="0 0 3 0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="PART_ItemBorder" Padding="0 0 0 6" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource TopCompactRadius}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" IsHitTestVisible="False" />
                            <TextBox x:Name="PART_RenameTabTextBox" Margin="-2 -3" Padding="0" VerticalAlignment="Center" HorizontalAlignment="Center"  Background="Transparent" SelectionBrush="{DynamicResource Foreground}" SelectionTextBrush="{DynamicResource MainAccent}" BorderThickness="0" Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType=TabItem}, UpdateSourceTrigger=Explicit}" Visibility="Collapsed"></TextBox>
                            <Button x:Name="PART_CloseTabButton" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Collapsed">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
                                        <Setter Property="Margin" Value="5 0 0 0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Padding="0" Margin="0" x:Name="ButtonBorder" Background="Transparent" CornerRadius="{DynamicResource CompactRadius}">
                                                        <ContentPresenter Content="{TemplateBinding Content}" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ForegroundDisabled}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource BaseBgRed}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                                <Path Width="8" Height="8" x:Name="ButtonPath" Data="M0,0 L1,1 M0,1 L1,0" Stroke="{DynamicResource Foreground}" StrokeThickness="1" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Stretch="Uniform" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=CanCloseTabs, RelativeSource={RelativeSource AncestorType=ui:TabbedPanel}}" Value="True">
                            <Setter TargetName="PART_CloseTabButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value=".25"/>
                            <Setter TargetName="PART_CloseTabButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}"/>
                            <Setter TargetName="PART_CloseTabButton" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabbedToolBoxItem" TargetType="{x:Type ui:TabbedPanelItem}" BasedOn="{StaticResource TabItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="PART_ItemBorder" Padding="0 0 0 6" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource TopCompactRadius}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Opacity=".5" Margin="2 1" x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Header" RecognizesAccessKey="True" IsHitTestVisible="False" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentSite" Property="Opacity" Value=".75"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                            <Setter TargetName="ContentSite" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="ToolTip" Value="{x:Null}">
                            <Setter TargetName="PART_ItemBorder" Property="ToolTip" Value="{Binding Header, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabbedPanel" TargetType="{x:Type ui:TabbedPanel}" BasedOn="{StaticResource TabControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource TabbedPanelItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="False" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" MinWidth="0"/>
                            </Grid.ColumnDefinitions>
                            <ScrollViewer Margin="0 0 0 -6" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Disabled" CanContentScroll="False" Grid.Column="0" Grid.Row="0">
                                <DockPanel IsItemsHost="True" Name="HeaderPanel" Panel.ZIndex="0" KeyboardNavigation.TabIndex="1" LastChildFill="False"/>
                            </ScrollViewer>
                            <ItemsControl Grid.Column="1" Margin="0 0 0 -5" ItemsSource="{Binding Path=CommandIcons, RelativeSource={RelativeSource AncestorType=ui:TabbedPanel}}">
                                <ItemsControl.Resources>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
                                        <Setter Property="Padding" Value="6 2"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Padding="0 0 0 5" x:Name="ButtonBorder" Background="Transparent" CornerRadius="{DynamicResource TopCompactRadius}">
                                                        <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ControlBgOver}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ItemsControl.Resources>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                        <Grid Name="ContentPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Column="0" Grid.Row="1">
                            <Border x:Name="ContentBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource NormalRadius}">
                                <ContentPresenter Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ui:TabbedPanel}" BasedOn="{StaticResource TabbedPanel}"/>

    <Style x:Key="TabbedToolBox" TargetType="{x:Type ui:TabbedPanel}" BasedOn="{StaticResource TabControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabbedToolBoxItem}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBgOver}"/>
        <Setter Property="Background" Value="{DynamicResource DialogBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="False" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.RowSpan="2" Background="{DynamicResource PanelBackground}" CornerRadius="{DynamicResource CompactRadius}"/>
                        <Grid Margin="0 0 0 -6">
                            <StackPanel Orientation="Horizontal" Name="HeaderPanel" IsItemsHost="True"/>
                        </Grid>
                        <Grid Name="ContentPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Column="0" Grid.Row="1">
                            <Border x:Name="ContentBorder" Width="{TemplateBinding Width}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Background="{DynamicResource PanelBackground}" CornerRadius="{DynamicResource CompactRadius}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="PART_Detail" Margin="4 2" TextElement.FontSize="10" TextElement.FontWeight="{DynamicResource FontWeightRegular}" TextElement.Foreground="{DynamicResource HighlightAccent}" Content="{Binding Path=SelectedItem.DetailBlock, RelativeSource={RelativeSource AncestorType=ui:TabbedPanel}}" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Commands" Margin="0" Content="{Binding Path=SelectedItem.CommandsBlock, RelativeSource={RelativeSource AncestorType=ui:TabbedPanel}}" VerticalAlignment="Center"/>
                                    <Border Grid.Row="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}">
                                        <ContentPresenter Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                    </Border>
                                    <ContentPresenter Grid.Row="2" Grid.RowSpan="2" Grid.ColumnSpan="2" x:Name="PART_Status" Margin="4 0" TextElement.FontSize="10" TextElement.FontWeight="Normal" TextElement.Foreground="{DynamicResource HighlightAccent}"  Content="{Binding Path=SelectedItem.StatusBlock, RelativeSource={RelativeSource AncestorType=ui:TabbedPanel}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=SelectedItem.DetailBlock, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_Detail" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=SelectedItem.CommandsBlock, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_Commands" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=SelectedItem.StatusBlock, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_Status" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Path x:Name="ArrowIcon" Width="10" Height="10" Grid.Column="2" Margin="5" Data="M0,0 L3,3 L6,0" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Stretch="Uniform"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="LayoutTransform" TargetName="ArrowIcon">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue=Left}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue=Center}"/>-->
        <Setter Property="Margin" Value="0 0 0 2"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="25" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Path x:Name="SubtreeLine" Grid.Column="0" Data="M0,0 L0,1 L1,1" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Stretch="Uniform">
                        </Path>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" Grid.Column="0" Grid.ColumnSpan="3" Padding="0" SnapsToDevicePixels="true" CornerRadius="{DynamicResource CompactRadius}">
                            <Grid>
                                <Border x:Name="ColorEffect" BorderThickness="0" Background="Transparent" CornerRadius="{DynamicResource CompactRadius}"/>
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextBlock.LineHeight="{TemplateBinding FontSize}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border x:Name="Border" BorderBrush="{TemplateBinding Background}" BorderThickness="1" CornerRadius="{DynamicResource CompactRadius}" Visibility="Hidden"/>
                            </Grid>
                        </Border>
                        <ToggleButton Foreground="{TemplateBinding Foreground}" Margin="0" Grid.Column="2" HorizontalAlignment="Center" x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}">

                        </ToggleButton>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" Margin="0 2 5 0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="{x:Null}">
                            <Setter TargetName="SubtreeLine" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>-->
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="True"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="0"/>
                        </MultiTrigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            <Setter Property="Margin" TargetName="ItemsHost" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="helpers:TreeViewHelper.IsMouseDirectlyOverItem" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#77000000" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="helpers:TreeViewHelper.IsMouseDirectlyOverItem" Value="true"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#66333333" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="#00000000" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="helpers:TreeViewHelper.IsMouseDirectlyOverItem" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgIdle}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="helpers:TreeViewHelper.IsMouseDirectlyOverItem" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgOver}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Background" Value="Transparent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ColorEffect" Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TreeView" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItem}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource NormalRadius}">
                        <ScrollViewer x:Name="_tv_scrollviewer_" CanContentScroll="True" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource TreeView}"/>



    <Style x:Key="SliderButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}"></Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource ControlBgIdle}"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="{DynamicResource CompactRadius}">
                        <Grid MinWidth="30">
                            <TextBlock x:Name="ValueDisplay" Visibility="Collapsed" Text="{Binding Path=Value, RelativeSource={RelativeSource AncestorType=Slider}, StringFormat=N1}" Width="40" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center"/>
                            <ContentControl x:Name="ContentDisplay" Content="{Binding Path=ToolTip, RelativeSource={RelativeSource AncestorType=Slider}}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgOver}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBgDown}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=ToolTip, RelativeSource={RelativeSource AncestorType=Slider}}" Value="{x:Null}">
                            <Setter TargetName="ValueDisplay" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentDisplay" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusedRectangle}"/>
        <Setter Property="ToolTipService.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="{DynamicResource NormalRadius}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" MinHeight="{TemplateBinding MinHeight}" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Track Grid.Row="1" x:Name="PART_Track" VerticalAlignment="Stretch">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Margin="0 0 -5 0" Style="{StaticResource SliderButton}" Command="Slider.DecreaseLarge" Focusable="False" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource SliderThumb}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Margin="-5 0 0 0" Style="{StaticResource SliderButton}" Command="Slider.IncreaseLarge" Focusable="False" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridTextColumnStyle" TargetType="TextBox">
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
    </Style>

    <Style x:Key="PropertyNameTextBlock" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextAlignment" Value="Right" />
    </Style>

    <Style x:Key="FieldDescriptionTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource PropertyNameTextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="FontSize" Value="9" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="LineHeight" Value="9" />
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="Foreground" Value="{DynamicResource HighlightAccent}" />
        <Style.Triggers>
            <Trigger Property="Text" Value="">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SettingsField" TargetType="TextBox" BasedOn="{StaticResource TextBox}">
        <Setter Property="Width" Value="50" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style TargetType="{x:Type ui:ConfigItem}" x:Key="ConfigItem">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:ConfigItem}">
                    <ControlTemplate.Resources>
                        <sys:Double x:Key="DescColMinWidth">160</sys:Double>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource PropertyNameTextBlock}" />
                        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}">
                            <Setter Property="Margin" Value="1" />
                            <Setter Property="MinWidth" Value="150" />
                        </Style>
                        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Margin" Value="2" />
                        </Style>
                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBox}">
                            <Setter Property="Margin" Value="2"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Setter Property="Height" Value="Auto"/>
                                <Setter Property="Visibility" Value="Visible"/>
                                
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Collapsed}" Value="True">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Setter Property="Height" Value="0"/>
                                        <Setter Property="ClipToBounds" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="{Binding Source={StaticResource DescColMinWidth}}" SharedSizeGroup="ConfigDescColSizeGroup" />
                            <ColumnDefinition MinWidth="50" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Margin="7 5" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Label}" />
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Grid.Column" Value="1"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>Custom</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InnerContent}"/>
                                                <Setter Property="ContentTemplate" Value="{x:Null}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>CheckBox</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="0"/>
                                                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InnerContent}"/>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <CheckBox IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=Binding, Mode=TwoWay}" VerticalContentAlignment="Center" Margin="2" />
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>ComboBox</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="1"/>
                                                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InnerContent}"/>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <ComboBox Name="ConfigComboBox" VerticalContentAlignment="Center"
                                                                      ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=ItemsSource, Mode=TwoWay}"
                                                                      ItemTemplate="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=ItemTemplate, Mode=TwoWay}"
                                                                      SelectedValue="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=Binding, Mode=TwoWay}"
                                                                      SelectedValuePath="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=SelectedValuePath, Mode=TwoWay}"
                                                                      DisplayMemberPath="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=DisplayMemberPath, Mode=TwoWay}"/>
                                                            <DataTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=SelectedValuePath}" Value="">
                                                                    <Setter TargetName="ConfigComboBox" Property="SelectedItem" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=Binding, Mode=TwoWay}"/>
                                                                    <Setter TargetName="ConfigComboBox" Property="SelectedValuePath" Value="{x:Null}"/>
                                                                    <Setter TargetName="ConfigComboBox" Property="SelectedValue" Value="{x:Null}"/>
                                                                </DataTrigger>
                                                            </DataTemplate.Triggers>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>Text</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="1"/>
                                                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InnerContent}"/>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <TextBox Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=Binding, Mode=TwoWay}" VerticalContentAlignment="Center" />
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>Integer</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="0"/>
                                                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InnerContent}"/>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <TextBox Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ui:ConfigItem}}, Path=Binding, Mode=TwoWay}" VerticalContentAlignment="Center" Width="70" />
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <TextBlock Grid.Column="1" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Description}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource FieldDescriptionTextBlock}">
                                        <Setter Property="Grid.Column" Value="2"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>CheckBox</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="1"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>ComboBox</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="2"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Type}">
                                                <DataTrigger.Value>
                                                    <ui:ConfigurationItemType>Integer</ui:ConfigurationItemType>
                                                </DataTrigger.Value>
                                                <Setter Property="Grid.Column" Value="1"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="3" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Actions}">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Actions}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ui:ConfigItem}" BasedOn="{StaticResource ConfigItem}"/>

</ResourceDictionary>